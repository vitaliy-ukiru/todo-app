// Code generated by pggen. DO NOT EDIT.

package gen

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
	"github.com/vitaliy-ukiru/todo-app/pkg/pgxuuid"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	CreateList(ctx context.Context, creatorID pgxuuid.UUID, title string) (pgxuuid.UUID, error)
	// CreateListBatch enqueues a CreateList query into batch to be executed
	// later by the batch.
	CreateListBatch(batch genericBatch, creatorID pgxuuid.UUID, title string)
	// CreateListScan scans the result of an executed CreateListBatch query.
	CreateListScan(results pgx.BatchResults) (pgxuuid.UUID, error)

	FindListByID(ctx context.Context, listID pgxuuid.UUID) (FindListByIDRow, error)
	// FindListByIDBatch enqueues a FindListByID query into batch to be executed
	// later by the batch.
	FindListByIDBatch(batch genericBatch, listID pgxuuid.UUID)
	// FindListByIDScan scans the result of an executed FindListByIDBatch query.
	FindListByIDScan(results pgx.BatchResults) (FindListByIDRow, error)

	FindUserLists(ctx context.Context, userID pgxuuid.UUID) ([]FindUserListsRow, error)
	// FindUserListsBatch enqueues a FindUserLists query into batch to be executed
	// later by the batch.
	FindUserListsBatch(batch genericBatch, userID pgxuuid.UUID)
	// FindUserListsScan scans the result of an executed FindUserListsBatch query.
	FindUserListsScan(results pgx.BatchResults) ([]FindUserListsRow, error)

	UpdateListTitle(ctx context.Context, newTitle string, listID pgxuuid.UUID) (pgconn.CommandTag, error)
	// UpdateListTitleBatch enqueues a UpdateListTitle query into batch to be executed
	// later by the batch.
	UpdateListTitleBatch(batch genericBatch, newTitle string, listID pgxuuid.UUID)
	// UpdateListTitleScan scans the result of an executed UpdateListTitleBatch query.
	UpdateListTitleScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	DeleteList(ctx context.Context, listID pgxuuid.UUID) (pgconn.CommandTag, error)
	// DeleteListBatch enqueues a DeleteList query into batch to be executed
	// later by the batch.
	DeleteListBatch(batch genericBatch, listID pgxuuid.UUID)
	// DeleteListScan scans the result of an executed DeleteListBatch query.
	DeleteListScan(results pgx.BatchResults) (pgconn.CommandTag, error)
}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// genericBatch batches queries to send in a single network request to a
// Postgres server. This is usually backed by *pgx.Batch.
type genericBatch interface {
	// Queue queues a query to batch b. query can be an SQL query or the name of a
	// prepared statement. See Queue on *pgx.Batch.
	Queue(query string, arguments ...interface{})
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return NewQuerierConfig(conn, QuerierConfig{})
}

type QuerierConfig struct {
	// DataTypes contains pgtype.Value to use for encoding and decoding instead
	// of pggen-generated pgtype.ValueTranscoder.
	//
	// If OIDs are available for an input parameter type and all of its
	// transitive dependencies, pggen will use the binary encoding format for
	// the input parameter.
	DataTypes []pgtype.DataType
}

// NewQuerierConfig creates a DBQuerier that implements Querier with the given
// config. conn is typically *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerierConfig(conn genericConn, cfg QuerierConfig) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver(cfg.DataTypes)}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

// preparer is any Postgres connection transport that provides a way to prepare
// a statement, most commonly *pgx.Conn.
type preparer interface {
	Prepare(ctx context.Context, name, sql string) (sd *pgconn.StatementDescription, err error)
}

// PrepareAllQueries executes a PREPARE statement for all pggen generated SQL
// queries in querier files. Typical usage is as the AfterConnect callback
// for pgxpool.Config
//
// pgx will use the prepared statement if available. Calling PrepareAllQueries
// is an optional optimization to avoid a network round-trip the first time pgx
// runs a query if pgx statement caching is enabled.
func PrepareAllQueries(ctx context.Context, p preparer) error {
	if _, err := p.Prepare(ctx, createListSQL, createListSQL); err != nil {
		return fmt.Errorf("prepare query 'CreateList': %w", err)
	}
	if _, err := p.Prepare(ctx, findListByIDSQL, findListByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindListByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findUserListsSQL, findUserListsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUserLists': %w", err)
	}
	if _, err := p.Prepare(ctx, updateListTitleSQL, updateListTitleSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateListTitle': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteListSQL, deleteListSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteList': %w", err)
	}
	return nil
}

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver(types []pgtype.DataType) *typeResolver {
	ci := pgtype.NewConnInfo()
	for _, typ := range types {
		if txt, ok := typ.Value.(textPreferrer); ok && typ.OID != unknownOID {
			typ.Value = txt.ValueTranscoder
		}
		ci.RegisterDataType(typ)
	}
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

const createListSQL = `INSERT INTO task_lists(creator_id, title)
VALUES ($1, $2)
RETURNING id;`

// CreateList implements Querier.CreateList.
func (q *DBQuerier) CreateList(ctx context.Context, creatorID pgxuuid.UUID, title string) (pgxuuid.UUID, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CreateList")
	row := q.conn.QueryRow(ctx, createListSQL, creatorID, title)
	var item pgxuuid.UUID
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query CreateList: %w", err)
	}
	return item, nil
}

// CreateListBatch implements Querier.CreateListBatch.
func (q *DBQuerier) CreateListBatch(batch genericBatch, creatorID pgxuuid.UUID, title string) {
	batch.Queue(createListSQL, creatorID, title)
}

// CreateListScan implements Querier.CreateListScan.
func (q *DBQuerier) CreateListScan(results pgx.BatchResults) (pgxuuid.UUID, error) {
	row := results.QueryRow()
	var item pgxuuid.UUID
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan CreateListBatch row: %w", err)
	}
	return item, nil
}

const findListByIDSQL = `SELECT id, creator_id, title
FROM task_lists
WHERE id = $1;`

type FindListByIDRow struct {
	ID        pgxuuid.UUID `json:"id"`
	CreatorID pgxuuid.UUID `json:"creator_id"`
	Title     string       `json:"title"`
}

// FindListByID implements Querier.FindListByID.
func (q *DBQuerier) FindListByID(ctx context.Context, listID pgxuuid.UUID) (FindListByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindListByID")
	row := q.conn.QueryRow(ctx, findListByIDSQL, listID)
	var item FindListByIDRow
	if err := row.Scan(&item.ID, &item.CreatorID, &item.Title); err != nil {
		return item, fmt.Errorf("query FindListByID: %w", err)
	}
	return item, nil
}

// FindListByIDBatch implements Querier.FindListByIDBatch.
func (q *DBQuerier) FindListByIDBatch(batch genericBatch, listID pgxuuid.UUID) {
	batch.Queue(findListByIDSQL, listID)
}

// FindListByIDScan implements Querier.FindListByIDScan.
func (q *DBQuerier) FindListByIDScan(results pgx.BatchResults) (FindListByIDRow, error) {
	row := results.QueryRow()
	var item FindListByIDRow
	if err := row.Scan(&item.ID, &item.CreatorID, &item.Title); err != nil {
		return item, fmt.Errorf("scan FindListByIDBatch row: %w", err)
	}
	return item, nil
}

const findUserListsSQL = `SELECT id, creator_id, title
FROM task_lists
WHERE creator_id = $1;`

type FindUserListsRow struct {
	ID        pgxuuid.UUID `json:"id"`
	CreatorID pgxuuid.UUID `json:"creator_id"`
	Title     string       `json:"title"`
}

// FindUserLists implements Querier.FindUserLists.
func (q *DBQuerier) FindUserLists(ctx context.Context, userID pgxuuid.UUID) ([]FindUserListsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindUserLists")
	rows, err := q.conn.Query(ctx, findUserListsSQL, userID)
	if err != nil {
		return nil, fmt.Errorf("query FindUserLists: %w", err)
	}
	defer rows.Close()
	items := []FindUserListsRow{}
	for rows.Next() {
		var item FindUserListsRow
		if err := rows.Scan(&item.ID, &item.CreatorID, &item.Title); err != nil {
			return nil, fmt.Errorf("scan FindUserLists row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindUserLists rows: %w", err)
	}
	return items, err
}

// FindUserListsBatch implements Querier.FindUserListsBatch.
func (q *DBQuerier) FindUserListsBatch(batch genericBatch, userID pgxuuid.UUID) {
	batch.Queue(findUserListsSQL, userID)
}

// FindUserListsScan implements Querier.FindUserListsScan.
func (q *DBQuerier) FindUserListsScan(results pgx.BatchResults) ([]FindUserListsRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindUserListsBatch: %w", err)
	}
	defer rows.Close()
	items := []FindUserListsRow{}
	for rows.Next() {
		var item FindUserListsRow
		if err := rows.Scan(&item.ID, &item.CreatorID, &item.Title); err != nil {
			return nil, fmt.Errorf("scan FindUserListsBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindUserListsBatch rows: %w", err)
	}
	return items, err
}

const updateListTitleSQL = `UPDATE task_lists
SET title=$1
WHERE id = $2;`

// UpdateListTitle implements Querier.UpdateListTitle.
func (q *DBQuerier) UpdateListTitle(ctx context.Context, newTitle string, listID pgxuuid.UUID) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateListTitle")
	cmdTag, err := q.conn.Exec(ctx, updateListTitleSQL, newTitle, listID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpdateListTitle: %w", err)
	}
	return cmdTag, err
}

// UpdateListTitleBatch implements Querier.UpdateListTitleBatch.
func (q *DBQuerier) UpdateListTitleBatch(batch genericBatch, newTitle string, listID pgxuuid.UUID) {
	batch.Queue(updateListTitleSQL, newTitle, listID)
}

// UpdateListTitleScan implements Querier.UpdateListTitleScan.
func (q *DBQuerier) UpdateListTitleScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpdateListTitleBatch: %w", err)
	}
	return cmdTag, err
}

const deleteListSQL = `DELETE FROM task_lists WHERE id=$1;`

// DeleteList implements Querier.DeleteList.
func (q *DBQuerier) DeleteList(ctx context.Context, listID pgxuuid.UUID) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteList")
	cmdTag, err := q.conn.Exec(ctx, deleteListSQL, listID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteList: %w", err)
	}
	return cmdTag, err
}

// DeleteListBatch implements Querier.DeleteListBatch.
func (q *DBQuerier) DeleteListBatch(batch genericBatch, listID pgxuuid.UUID) {
	batch.Queue(deleteListSQL, listID)
}

// DeleteListScan implements Querier.DeleteListScan.
func (q *DBQuerier) DeleteListScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec DeleteListBatch: %w", err)
	}
	return cmdTag, err
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs if the results from QueryAllDataTypes aren't passed to
// NewQuerierConfig.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
