// Code generated by pggen. DO NOT EDIT.

package postgres

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
	"github.com/vitaliy-ukiru/todo-app/pkg/pgxuuid"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	CreateUser(ctx context.Context, params CreateUserParams) (CreateUserRow, error)
	// CreateUserBatch enqueues a CreateUser query into batch to be executed
	// later by the batch.
	CreateUserBatch(batch genericBatch, params CreateUserParams)
	// CreateUserScan scans the result of an executed CreateUserBatch query.
	CreateUserScan(results pgx.BatchResults) (CreateUserRow, error)

	FindUserByID(ctx context.Context, id pgxuuid.UUID) (FindUserByIDRow, error)
	// FindUserByIDBatch enqueues a FindUserByID query into batch to be executed
	// later by the batch.
	FindUserByIDBatch(batch genericBatch, id pgxuuid.UUID)
	// FindUserByIDScan scans the result of an executed FindUserByIDBatch query.
	FindUserByIDScan(results pgx.BatchResults) (FindUserByIDRow, error)

	FindUserByEmail(ctx context.Context, email string) (FindUserByEmailRow, error)
	// FindUserByEmailBatch enqueues a FindUserByEmail query into batch to be executed
	// later by the batch.
	FindUserByEmailBatch(batch genericBatch, email string)
	// FindUserByEmailScan scans the result of an executed FindUserByEmailBatch query.
	FindUserByEmailScan(results pgx.BatchResults) (FindUserByEmailRow, error)

	UpdateUserPassword(ctx context.Context, password string, id pgxuuid.UUID) (pgconn.CommandTag, error)
	// UpdateUserPasswordBatch enqueues a UpdateUserPassword query into batch to be executed
	// later by the batch.
	UpdateUserPasswordBatch(batch genericBatch, password string, id pgxuuid.UUID)
	// UpdateUserPasswordScan scans the result of an executed UpdateUserPasswordBatch query.
	UpdateUserPasswordScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	DeleteUser(ctx context.Context, id pgxuuid.UUID) (pgconn.CommandTag, error)
	// DeleteUserBatch enqueues a DeleteUser query into batch to be executed
	// later by the batch.
	DeleteUserBatch(batch genericBatch, id pgxuuid.UUID)
	// DeleteUserScan scans the result of an executed DeleteUserBatch query.
	DeleteUserScan(results pgx.BatchResults) (pgconn.CommandTag, error)
}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// genericBatch batches queries to send in a single network request to a
// Postgres server. This is usually backed by *pgx.Batch.
type genericBatch interface {
	// Queue queues a query to batch b. query can be an SQL query or the name of a
	// prepared statement. See Queue on *pgx.Batch.
	Queue(query string, arguments ...interface{})
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return NewQuerierConfig(conn, QuerierConfig{})
}

type QuerierConfig struct {
	// DataTypes contains pgtype.Value to use for encoding and decoding instead
	// of pggen-generated pgtype.ValueTranscoder.
	//
	// If OIDs are available for an input parameter type and all of its
	// transitive dependencies, pggen will use the binary encoding format for
	// the input parameter.
	DataTypes []pgtype.DataType
}

// NewQuerierConfig creates a DBQuerier that implements Querier with the given
// config. conn is typically *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerierConfig(conn genericConn, cfg QuerierConfig) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver(cfg.DataTypes)}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

// preparer is any Postgres connection transport that provides a way to prepare
// a statement, most commonly *pgx.Conn.
type preparer interface {
	Prepare(ctx context.Context, name, sql string) (sd *pgconn.StatementDescription, err error)
}

// PrepareAllQueries executes a PREPARE statement for all pggen generated SQL
// queries in querier files. Typical usage is as the AfterConnect callback
// for pgxpool.Config
//
// pgx will use the prepared statement if available. Calling PrepareAllQueries
// is an optional optimization to avoid a network round-trip the first time pgx
// runs a query if pgx statement caching is enabled.
func PrepareAllQueries(ctx context.Context, p preparer) error {
	if _, err := p.Prepare(ctx, createUserSQL, createUserSQL); err != nil {
		return fmt.Errorf("prepare query 'CreateUser': %w", err)
	}
	if _, err := p.Prepare(ctx, findUserByIDSQL, findUserByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUserByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findUserByEmailSQL, findUserByEmailSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUserByEmail': %w", err)
	}
	if _, err := p.Prepare(ctx, updateUserPasswordSQL, updateUserPasswordSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateUserPassword': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteUserSQL, deleteUserSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteUser': %w", err)
	}
	return nil
}

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver(types []pgtype.DataType) *typeResolver {
	ci := pgtype.NewConnInfo()
	for _, typ := range types {
		if txt, ok := typ.Value.(textPreferrer); ok && typ.OID != unknownOID {
			typ.Value = txt.ValueTranscoder
		}
		ci.RegisterDataType(typ)
	}
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

const createUserSQL = `INSERT INTO users(email, username, password)
VALUES ($1,
        $2,
        $3)
RETURNING id, created_at;`

type CreateUserParams struct {
	Email    string
	Username string
	Password string
}

type CreateUserRow struct {
	ID        pgxuuid.UUID       `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

// CreateUser implements Querier.CreateUser.
func (q *DBQuerier) CreateUser(ctx context.Context, params CreateUserParams) (CreateUserRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CreateUser")
	row := q.conn.QueryRow(ctx, createUserSQL, params.Email, params.Username, params.Password)
	var item CreateUserRow
	if err := row.Scan(&item.ID, &item.CreatedAt); err != nil {
		return item, fmt.Errorf("query CreateUser: %w", err)
	}
	return item, nil
}

// CreateUserBatch implements Querier.CreateUserBatch.
func (q *DBQuerier) CreateUserBatch(batch genericBatch, params CreateUserParams) {
	batch.Queue(createUserSQL, params.Email, params.Username, params.Password)
}

// CreateUserScan implements Querier.CreateUserScan.
func (q *DBQuerier) CreateUserScan(results pgx.BatchResults) (CreateUserRow, error) {
	row := results.QueryRow()
	var item CreateUserRow
	if err := row.Scan(&item.ID, &item.CreatedAt); err != nil {
		return item, fmt.Errorf("scan CreateUserBatch row: %w", err)
	}
	return item, nil
}

const findUserByIDSQL = `SELECT id, email, username, created_at
FROM users
WHERE id = $1::uuid;`

type FindUserByIDRow struct {
	ID        pgxuuid.UUID       `json:"id"`
	Email     string             `json:"email"`
	Username  string             `json:"username"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

// FindUserByID implements Querier.FindUserByID.
func (q *DBQuerier) FindUserByID(ctx context.Context, id pgxuuid.UUID) (FindUserByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindUserByID")
	row := q.conn.QueryRow(ctx, findUserByIDSQL, id)
	var item FindUserByIDRow
	if err := row.Scan(&item.ID, &item.Email, &item.Username, &item.CreatedAt); err != nil {
		return item, fmt.Errorf("query FindUserByID: %w", err)
	}
	return item, nil
}

// FindUserByIDBatch implements Querier.FindUserByIDBatch.
func (q *DBQuerier) FindUserByIDBatch(batch genericBatch, id pgxuuid.UUID) {
	batch.Queue(findUserByIDSQL, id)
}

// FindUserByIDScan implements Querier.FindUserByIDScan.
func (q *DBQuerier) FindUserByIDScan(results pgx.BatchResults) (FindUserByIDRow, error) {
	row := results.QueryRow()
	var item FindUserByIDRow
	if err := row.Scan(&item.ID, &item.Email, &item.Username, &item.CreatedAt); err != nil {
		return item, fmt.Errorf("scan FindUserByIDBatch row: %w", err)
	}
	return item, nil
}

const findUserByEmailSQL = `SELECT id, email, username, password, created_at
FROM users
WHERE email = $1;`

type FindUserByEmailRow struct {
	ID        pgxuuid.UUID       `json:"id"`
	Email     string             `json:"email"`
	Username  string             `json:"username"`
	Password  string             `json:"password"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

// FindUserByEmail implements Querier.FindUserByEmail.
func (q *DBQuerier) FindUserByEmail(ctx context.Context, email string) (FindUserByEmailRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindUserByEmail")
	row := q.conn.QueryRow(ctx, findUserByEmailSQL, email)
	var item FindUserByEmailRow
	if err := row.Scan(&item.ID, &item.Email, &item.Username, &item.Password, &item.CreatedAt); err != nil {
		return item, fmt.Errorf("query FindUserByEmail: %w", err)
	}
	return item, nil
}

// FindUserByEmailBatch implements Querier.FindUserByEmailBatch.
func (q *DBQuerier) FindUserByEmailBatch(batch genericBatch, email string) {
	batch.Queue(findUserByEmailSQL, email)
}

// FindUserByEmailScan implements Querier.FindUserByEmailScan.
func (q *DBQuerier) FindUserByEmailScan(results pgx.BatchResults) (FindUserByEmailRow, error) {
	row := results.QueryRow()
	var item FindUserByEmailRow
	if err := row.Scan(&item.ID, &item.Email, &item.Username, &item.Password, &item.CreatedAt); err != nil {
		return item, fmt.Errorf("scan FindUserByEmailBatch row: %w", err)
	}
	return item, nil
}

const updateUserPasswordSQL = `UPDATE users
SET password = $1
WHERE id = $2::uuid;`

// UpdateUserPassword implements Querier.UpdateUserPassword.
func (q *DBQuerier) UpdateUserPassword(ctx context.Context, password string, id pgxuuid.UUID) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateUserPassword")
	cmdTag, err := q.conn.Exec(ctx, updateUserPasswordSQL, password, id)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpdateUserPassword: %w", err)
	}
	return cmdTag, err
}

// UpdateUserPasswordBatch implements Querier.UpdateUserPasswordBatch.
func (q *DBQuerier) UpdateUserPasswordBatch(batch genericBatch, password string, id pgxuuid.UUID) {
	batch.Queue(updateUserPasswordSQL, password, id)
}

// UpdateUserPasswordScan implements Querier.UpdateUserPasswordScan.
func (q *DBQuerier) UpdateUserPasswordScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpdateUserPasswordBatch: %w", err)
	}
	return cmdTag, err
}

const deleteUserSQL = `DELETE
FROM users
WHERE id = $1::uuid;`

// DeleteUser implements Querier.DeleteUser.
func (q *DBQuerier) DeleteUser(ctx context.Context, id pgxuuid.UUID) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteUser")
	cmdTag, err := q.conn.Exec(ctx, deleteUserSQL, id)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteUser: %w", err)
	}
	return cmdTag, err
}

// DeleteUserBatch implements Querier.DeleteUserBatch.
func (q *DBQuerier) DeleteUserBatch(batch genericBatch, id pgxuuid.UUID) {
	batch.Queue(deleteUserSQL, id)
}

// DeleteUserScan implements Querier.DeleteUserScan.
func (q *DBQuerier) DeleteUserScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec DeleteUserBatch: %w", err)
	}
	return cmdTag, err
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs if the results from QueryAllDataTypes aren't passed to
// NewQuerierConfig.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
