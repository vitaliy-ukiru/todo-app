// Code generated by pggen. DO NOT EDIT.

package postgres

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
	"github.com/vitaliy-ukiru/todo-app/pkg/pgxuuid"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	CreateTask(ctx context.Context, params CreateTaskParams) (CreateTaskRow, error)
	// CreateTaskBatch enqueues a CreateTask query into batch to be executed
	// later by the batch.
	CreateTaskBatch(batch genericBatch, params CreateTaskParams)
	// CreateTaskScan scans the result of an executed CreateTaskBatch query.
	CreateTaskScan(results pgx.BatchResults) (CreateTaskRow, error)

	CreateTaskInDefaultList(ctx context.Context, params CreateTaskInDefaultListParams) (CreateTaskInDefaultListRow, error)
	// CreateTaskInDefaultListBatch enqueues a CreateTaskInDefaultList query into batch to be executed
	// later by the batch.
	CreateTaskInDefaultListBatch(batch genericBatch, params CreateTaskInDefaultListParams)
	// CreateTaskInDefaultListScan scans the result of an executed CreateTaskInDefaultListBatch query.
	CreateTaskInDefaultListScan(results pgx.BatchResults) (CreateTaskInDefaultListRow, error)

	FindTaskByID(ctx context.Context, listID pgxuuid.UUID) (FindTaskByIDRow, error)
	// FindTaskByIDBatch enqueues a FindTaskByID query into batch to be executed
	// later by the batch.
	FindTaskByIDBatch(batch genericBatch, listID pgxuuid.UUID)
	// FindTaskByIDScan scans the result of an executed FindTaskByIDBatch query.
	FindTaskByIDScan(results pgx.BatchResults) (FindTaskByIDRow, error)

	FindTaskInMainList(ctx context.Context, id pgxuuid.UUID) ([]FindTaskInMainListRow, error)
	// FindTaskInMainListBatch enqueues a FindTaskInMainList query into batch to be executed
	// later by the batch.
	FindTaskInMainListBatch(batch genericBatch, id pgxuuid.UUID)
	// FindTaskInMainListScan scans the result of an executed FindTaskInMainListBatch query.
	FindTaskInMainListScan(results pgx.BatchResults) ([]FindTaskInMainListRow, error)

	FindBasicTaskInList(ctx context.Context, listID pgxuuid.UUID) ([]FindBasicTaskInListRow, error)
	// FindBasicTaskInListBatch enqueues a FindBasicTaskInList query into batch to be executed
	// later by the batch.
	FindBasicTaskInListBatch(batch genericBatch, listID pgxuuid.UUID)
	// FindBasicTaskInListScan scans the result of an executed FindBasicTaskInListBatch query.
	FindBasicTaskInListScan(results pgx.BatchResults) ([]FindBasicTaskInListRow, error)

	UpdateTaskTitle(ctx context.Context, title string, id pgxuuid.UUID) (pgconn.CommandTag, error)
	// UpdateTaskTitleBatch enqueues a UpdateTaskTitle query into batch to be executed
	// later by the batch.
	UpdateTaskTitleBatch(batch genericBatch, title string, id pgxuuid.UUID)
	// UpdateTaskTitleScan scans the result of an executed UpdateTaskTitleBatch query.
	UpdateTaskTitleScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateTaskBody(ctx context.Context, body string, id pgxuuid.UUID) (pgconn.CommandTag, error)
	// UpdateTaskBodyBatch enqueues a UpdateTaskBody query into batch to be executed
	// later by the batch.
	UpdateTaskBodyBatch(batch genericBatch, body string, id pgxuuid.UUID)
	// UpdateTaskBodyScan scans the result of an executed UpdateTaskBodyBatch query.
	UpdateTaskBodyScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateTaskStatus(ctx context.Context, status bool, id pgxuuid.UUID) (pgconn.CommandTag, error)
	// UpdateTaskStatusBatch enqueues a UpdateTaskStatus query into batch to be executed
	// later by the batch.
	UpdateTaskStatusBatch(batch genericBatch, status bool, id pgxuuid.UUID)
	// UpdateTaskStatusScan scans the result of an executed UpdateTaskStatusBatch query.
	UpdateTaskStatusScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	ChangeTaskStatus(ctx context.Context, id pgxuuid.UUID) (bool, error)
	// ChangeTaskStatusBatch enqueues a ChangeTaskStatus query into batch to be executed
	// later by the batch.
	ChangeTaskStatusBatch(batch genericBatch, id pgxuuid.UUID)
	// ChangeTaskStatusScan scans the result of an executed ChangeTaskStatusBatch query.
	ChangeTaskStatusScan(results pgx.BatchResults) (bool, error)

	DeleteTask(ctx context.Context, id pgxuuid.UUID) (pgconn.CommandTag, error)
	// DeleteTaskBatch enqueues a DeleteTask query into batch to be executed
	// later by the batch.
	DeleteTaskBatch(batch genericBatch, id pgxuuid.UUID)
	// DeleteTaskScan scans the result of an executed DeleteTaskBatch query.
	DeleteTaskScan(results pgx.BatchResults) (pgconn.CommandTag, error)
}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// genericBatch batches queries to send in a single network request to a
// Postgres server. This is usually backed by *pgx.Batch.
type genericBatch interface {
	// Queue queues a query to batch b. query can be an SQL query or the name of a
	// prepared statement. See Queue on *pgx.Batch.
	Queue(query string, arguments ...interface{})
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return NewQuerierConfig(conn, QuerierConfig{})
}

type QuerierConfig struct {
	// DataTypes contains pgtype.Value to use for encoding and decoding instead
	// of pggen-generated pgtype.ValueTranscoder.
	//
	// If OIDs are available for an input parameter type and all of its
	// transitive dependencies, pggen will use the binary encoding format for
	// the input parameter.
	DataTypes []pgtype.DataType
}

// NewQuerierConfig creates a DBQuerier that implements Querier with the given
// config. conn is typically *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerierConfig(conn genericConn, cfg QuerierConfig) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver(cfg.DataTypes)}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

// preparer is any Postgres connection transport that provides a way to prepare
// a statement, most commonly *pgx.Conn.
type preparer interface {
	Prepare(ctx context.Context, name, sql string) (sd *pgconn.StatementDescription, err error)
}

// PrepareAllQueries executes a PREPARE statement for all pggen generated SQL
// queries in querier files. Typical usage is as the AfterConnect callback
// for pgxpool.Config
//
// pgx will use the prepared statement if available. Calling PrepareAllQueries
// is an optional optimization to avoid a network round-trip the first time pgx
// runs a query if pgx statement caching is enabled.
func PrepareAllQueries(ctx context.Context, p preparer) error {
	if _, err := p.Prepare(ctx, createTaskSQL, createTaskSQL); err != nil {
		return fmt.Errorf("prepare query 'CreateTask': %w", err)
	}
	if _, err := p.Prepare(ctx, createTaskInDefaultListSQL, createTaskInDefaultListSQL); err != nil {
		return fmt.Errorf("prepare query 'CreateTaskInDefaultList': %w", err)
	}
	if _, err := p.Prepare(ctx, findTaskByIDSQL, findTaskByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTaskByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findTaskInMainListSQL, findTaskInMainListSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTaskInMainList': %w", err)
	}
	if _, err := p.Prepare(ctx, findBasicTaskInListSQL, findBasicTaskInListSQL); err != nil {
		return fmt.Errorf("prepare query 'FindBasicTaskInList': %w", err)
	}
	if _, err := p.Prepare(ctx, updateTaskTitleSQL, updateTaskTitleSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateTaskTitle': %w", err)
	}
	if _, err := p.Prepare(ctx, updateTaskBodySQL, updateTaskBodySQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateTaskBody': %w", err)
	}
	if _, err := p.Prepare(ctx, updateTaskStatusSQL, updateTaskStatusSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateTaskStatus': %w", err)
	}
	if _, err := p.Prepare(ctx, changeTaskStatusSQL, changeTaskStatusSQL); err != nil {
		return fmt.Errorf("prepare query 'ChangeTaskStatus': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteTaskSQL, deleteTaskSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteTask': %w", err)
	}
	return nil
}

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver(types []pgtype.DataType) *typeResolver {
	ci := pgtype.NewConnInfo()
	for _, typ := range types {
		if txt, ok := typ.Value.(textPreferrer); ok && typ.OID != unknownOID {
			typ.Value = txt.ValueTranscoder
		}
		ci.RegisterDataType(typ)
	}
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

const createTaskSQL = `INSERT INTO tasks(creator_id, list_id, title, body)
VALUES ($1,
        $2,
        $3,
        $4)
RETURNING id, created_at;`

type CreateTaskParams struct {
	CreatorID pgxuuid.UUID
	ListID    pgxuuid.UUID
	Title     string
	Body      string
}

type CreateTaskRow struct {
	ID        pgxuuid.UUID       `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

// CreateTask implements Querier.CreateTask.
func (q *DBQuerier) CreateTask(ctx context.Context, params CreateTaskParams) (CreateTaskRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CreateTask")
	row := q.conn.QueryRow(ctx, createTaskSQL, params.CreatorID, params.ListID, params.Title, params.Body)
	var item CreateTaskRow
	if err := row.Scan(&item.ID, &item.CreatedAt); err != nil {
		return item, fmt.Errorf("query CreateTask: %w", err)
	}
	return item, nil
}

// CreateTaskBatch implements Querier.CreateTaskBatch.
func (q *DBQuerier) CreateTaskBatch(batch genericBatch, params CreateTaskParams) {
	batch.Queue(createTaskSQL, params.CreatorID, params.ListID, params.Title, params.Body)
}

// CreateTaskScan implements Querier.CreateTaskScan.
func (q *DBQuerier) CreateTaskScan(results pgx.BatchResults) (CreateTaskRow, error) {
	row := results.QueryRow()
	var item CreateTaskRow
	if err := row.Scan(&item.ID, &item.CreatedAt); err != nil {
		return item, fmt.Errorf("scan CreateTaskBatch row: %w", err)
	}
	return item, nil
}

const createTaskInDefaultListSQL = `INSERT INTO tasks(creator_id, title, body)
VALUES ($1,
        $2,
        $3)
RETURNING id, created_at;`

type CreateTaskInDefaultListParams struct {
	CreatorID pgxuuid.UUID
	Title     string
	Body      string
}

type CreateTaskInDefaultListRow struct {
	ID        pgxuuid.UUID       `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

// CreateTaskInDefaultList implements Querier.CreateTaskInDefaultList.
func (q *DBQuerier) CreateTaskInDefaultList(ctx context.Context, params CreateTaskInDefaultListParams) (CreateTaskInDefaultListRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CreateTaskInDefaultList")
	row := q.conn.QueryRow(ctx, createTaskInDefaultListSQL, params.CreatorID, params.Title, params.Body)
	var item CreateTaskInDefaultListRow
	if err := row.Scan(&item.ID, &item.CreatedAt); err != nil {
		return item, fmt.Errorf("query CreateTaskInDefaultList: %w", err)
	}
	return item, nil
}

// CreateTaskInDefaultListBatch implements Querier.CreateTaskInDefaultListBatch.
func (q *DBQuerier) CreateTaskInDefaultListBatch(batch genericBatch, params CreateTaskInDefaultListParams) {
	batch.Queue(createTaskInDefaultListSQL, params.CreatorID, params.Title, params.Body)
}

// CreateTaskInDefaultListScan implements Querier.CreateTaskInDefaultListScan.
func (q *DBQuerier) CreateTaskInDefaultListScan(results pgx.BatchResults) (CreateTaskInDefaultListRow, error) {
	row := results.QueryRow()
	var item CreateTaskInDefaultListRow
	if err := row.Scan(&item.ID, &item.CreatedAt); err != nil {
		return item, fmt.Errorf("scan CreateTaskInDefaultListBatch row: %w", err)
	}
	return item, nil
}

const findTaskByIDSQL = `SELECT id,
       creator_id,
       list_id,
       title,
       body,
       done,
       created_at,
       updated_at
FROM tasks
WHERE id = $1::uuid
LIMIT 1;`

type FindTaskByIDRow struct {
	ID        pgxuuid.UUID       `json:"id"`
	CreatorID pgxuuid.UUID       `json:"creator_id"`
	ListID    pgxuuid.UUID       `json:"list_id"`
	Title     string             `json:"title"`
	Body      string             `json:"body"`
	Done      bool               `json:"done"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// FindTaskByID implements Querier.FindTaskByID.
func (q *DBQuerier) FindTaskByID(ctx context.Context, listID pgxuuid.UUID) (FindTaskByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindTaskByID")
	row := q.conn.QueryRow(ctx, findTaskByIDSQL, listID)
	var item FindTaskByIDRow
	if err := row.Scan(&item.ID, &item.CreatorID, &item.ListID, &item.Title, &item.Body, &item.Done, &item.CreatedAt, &item.UpdatedAt); err != nil {
		return item, fmt.Errorf("query FindTaskByID: %w", err)
	}
	return item, nil
}

// FindTaskByIDBatch implements Querier.FindTaskByIDBatch.
func (q *DBQuerier) FindTaskByIDBatch(batch genericBatch, listID pgxuuid.UUID) {
	batch.Queue(findTaskByIDSQL, listID)
}

// FindTaskByIDScan implements Querier.FindTaskByIDScan.
func (q *DBQuerier) FindTaskByIDScan(results pgx.BatchResults) (FindTaskByIDRow, error) {
	row := results.QueryRow()
	var item FindTaskByIDRow
	if err := row.Scan(&item.ID, &item.CreatorID, &item.ListID, &item.Title, &item.Body, &item.Done, &item.CreatedAt, &item.UpdatedAt); err != nil {
		return item, fmt.Errorf("scan FindTaskByIDBatch row: %w", err)
	}
	return item, nil
}

const findTaskInMainListSQL = `SELECT id,
       title,
       body,
       done,
       created_at,
       updated_at
FROM tasks
WHERE creator_id = $1::uuid
  AND list_id IS NULL;`

type FindTaskInMainListRow struct {
	ID        pgxuuid.UUID       `json:"id"`
	Title     string             `json:"title"`
	Body      string             `json:"body"`
	Done      bool               `json:"done"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// FindTaskInMainList implements Querier.FindTaskInMainList.
func (q *DBQuerier) FindTaskInMainList(ctx context.Context, id pgxuuid.UUID) ([]FindTaskInMainListRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindTaskInMainList")
	rows, err := q.conn.Query(ctx, findTaskInMainListSQL, id)
	if err != nil {
		return nil, fmt.Errorf("query FindTaskInMainList: %w", err)
	}
	defer rows.Close()
	items := []FindTaskInMainListRow{}
	for rows.Next() {
		var item FindTaskInMainListRow
		if err := rows.Scan(&item.ID, &item.Title, &item.Body, &item.Done, &item.CreatedAt, &item.UpdatedAt); err != nil {
			return nil, fmt.Errorf("scan FindTaskInMainList row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindTaskInMainList rows: %w", err)
	}
	return items, err
}

// FindTaskInMainListBatch implements Querier.FindTaskInMainListBatch.
func (q *DBQuerier) FindTaskInMainListBatch(batch genericBatch, id pgxuuid.UUID) {
	batch.Queue(findTaskInMainListSQL, id)
}

// FindTaskInMainListScan implements Querier.FindTaskInMainListScan.
func (q *DBQuerier) FindTaskInMainListScan(results pgx.BatchResults) ([]FindTaskInMainListRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindTaskInMainListBatch: %w", err)
	}
	defer rows.Close()
	items := []FindTaskInMainListRow{}
	for rows.Next() {
		var item FindTaskInMainListRow
		if err := rows.Scan(&item.ID, &item.Title, &item.Body, &item.Done, &item.CreatedAt, &item.UpdatedAt); err != nil {
			return nil, fmt.Errorf("scan FindTaskInMainListBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindTaskInMainListBatch rows: %w", err)
	}
	return items, err
}

const findBasicTaskInListSQL = `SELECT id,
       title,
       body,
       done,
       created_at,
       updated_at
FROM tasks
WHERE list_id = $1::uuid;`

type FindBasicTaskInListRow struct {
	ID        pgxuuid.UUID       `json:"id"`
	Title     string             `json:"title"`
	Body      string             `json:"body"`
	Done      bool               `json:"done"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

// FindBasicTaskInList implements Querier.FindBasicTaskInList.
func (q *DBQuerier) FindBasicTaskInList(ctx context.Context, listID pgxuuid.UUID) ([]FindBasicTaskInListRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindBasicTaskInList")
	rows, err := q.conn.Query(ctx, findBasicTaskInListSQL, listID)
	if err != nil {
		return nil, fmt.Errorf("query FindBasicTaskInList: %w", err)
	}
	defer rows.Close()
	items := []FindBasicTaskInListRow{}
	for rows.Next() {
		var item FindBasicTaskInListRow
		if err := rows.Scan(&item.ID, &item.Title, &item.Body, &item.Done, &item.CreatedAt, &item.UpdatedAt); err != nil {
			return nil, fmt.Errorf("scan FindBasicTaskInList row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindBasicTaskInList rows: %w", err)
	}
	return items, err
}

// FindBasicTaskInListBatch implements Querier.FindBasicTaskInListBatch.
func (q *DBQuerier) FindBasicTaskInListBatch(batch genericBatch, listID pgxuuid.UUID) {
	batch.Queue(findBasicTaskInListSQL, listID)
}

// FindBasicTaskInListScan implements Querier.FindBasicTaskInListScan.
func (q *DBQuerier) FindBasicTaskInListScan(results pgx.BatchResults) ([]FindBasicTaskInListRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindBasicTaskInListBatch: %w", err)
	}
	defer rows.Close()
	items := []FindBasicTaskInListRow{}
	for rows.Next() {
		var item FindBasicTaskInListRow
		if err := rows.Scan(&item.ID, &item.Title, &item.Body, &item.Done, &item.CreatedAt, &item.UpdatedAt); err != nil {
			return nil, fmt.Errorf("scan FindBasicTaskInListBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindBasicTaskInListBatch rows: %w", err)
	}
	return items, err
}

const updateTaskTitleSQL = `UPDATE tasks
SET title = $1
WHERE id = $2::uuid;`

// UpdateTaskTitle implements Querier.UpdateTaskTitle.
func (q *DBQuerier) UpdateTaskTitle(ctx context.Context, title string, id pgxuuid.UUID) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateTaskTitle")
	cmdTag, err := q.conn.Exec(ctx, updateTaskTitleSQL, title, id)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpdateTaskTitle: %w", err)
	}
	return cmdTag, err
}

// UpdateTaskTitleBatch implements Querier.UpdateTaskTitleBatch.
func (q *DBQuerier) UpdateTaskTitleBatch(batch genericBatch, title string, id pgxuuid.UUID) {
	batch.Queue(updateTaskTitleSQL, title, id)
}

// UpdateTaskTitleScan implements Querier.UpdateTaskTitleScan.
func (q *DBQuerier) UpdateTaskTitleScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpdateTaskTitleBatch: %w", err)
	}
	return cmdTag, err
}

const updateTaskBodySQL = `UPDATE tasks
SET body = $1
WHERE id = $2::uuid;`

// UpdateTaskBody implements Querier.UpdateTaskBody.
func (q *DBQuerier) UpdateTaskBody(ctx context.Context, body string, id pgxuuid.UUID) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateTaskBody")
	cmdTag, err := q.conn.Exec(ctx, updateTaskBodySQL, body, id)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpdateTaskBody: %w", err)
	}
	return cmdTag, err
}

// UpdateTaskBodyBatch implements Querier.UpdateTaskBodyBatch.
func (q *DBQuerier) UpdateTaskBodyBatch(batch genericBatch, body string, id pgxuuid.UUID) {
	batch.Queue(updateTaskBodySQL, body, id)
}

// UpdateTaskBodyScan implements Querier.UpdateTaskBodyScan.
func (q *DBQuerier) UpdateTaskBodyScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpdateTaskBodyBatch: %w", err)
	}
	return cmdTag, err
}

const updateTaskStatusSQL = `UPDATE tasks
SET done = $1
WHERE id = $2::uuid;`

// UpdateTaskStatus implements Querier.UpdateTaskStatus.
func (q *DBQuerier) UpdateTaskStatus(ctx context.Context, status bool, id pgxuuid.UUID) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateTaskStatus")
	cmdTag, err := q.conn.Exec(ctx, updateTaskStatusSQL, status, id)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpdateTaskStatus: %w", err)
	}
	return cmdTag, err
}

// UpdateTaskStatusBatch implements Querier.UpdateTaskStatusBatch.
func (q *DBQuerier) UpdateTaskStatusBatch(batch genericBatch, status bool, id pgxuuid.UUID) {
	batch.Queue(updateTaskStatusSQL, status, id)
}

// UpdateTaskStatusScan implements Querier.UpdateTaskStatusScan.
func (q *DBQuerier) UpdateTaskStatusScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpdateTaskStatusBatch: %w", err)
	}
	return cmdTag, err
}

const changeTaskStatusSQL = `UPDATE tasks
SET done = not done
WHERE id = $1::uuid
RETURNING done;`

// ChangeTaskStatus implements Querier.ChangeTaskStatus.
func (q *DBQuerier) ChangeTaskStatus(ctx context.Context, id pgxuuid.UUID) (bool, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ChangeTaskStatus")
	row := q.conn.QueryRow(ctx, changeTaskStatusSQL, id)
	var item bool
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query ChangeTaskStatus: %w", err)
	}
	return item, nil
}

// ChangeTaskStatusBatch implements Querier.ChangeTaskStatusBatch.
func (q *DBQuerier) ChangeTaskStatusBatch(batch genericBatch, id pgxuuid.UUID) {
	batch.Queue(changeTaskStatusSQL, id)
}

// ChangeTaskStatusScan implements Querier.ChangeTaskStatusScan.
func (q *DBQuerier) ChangeTaskStatusScan(results pgx.BatchResults) (bool, error) {
	row := results.QueryRow()
	var item bool
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan ChangeTaskStatusBatch row: %w", err)
	}
	return item, nil
}

const deleteTaskSQL = `DELETE
FROM tasks
WHERE id = $1::uuid;`

// DeleteTask implements Querier.DeleteTask.
func (q *DBQuerier) DeleteTask(ctx context.Context, id pgxuuid.UUID) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteTask")
	cmdTag, err := q.conn.Exec(ctx, deleteTaskSQL, id)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteTask: %w", err)
	}
	return cmdTag, err
}

// DeleteTaskBatch implements Querier.DeleteTaskBatch.
func (q *DBQuerier) DeleteTaskBatch(batch genericBatch, id pgxuuid.UUID) {
	batch.Queue(deleteTaskSQL, id)
}

// DeleteTaskScan implements Querier.DeleteTaskScan.
func (q *DBQuerier) DeleteTaskScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec DeleteTaskBatch: %w", err)
	}
	return cmdTag, err
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs if the results from QueryAllDataTypes aren't passed to
// NewQuerierConfig.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
